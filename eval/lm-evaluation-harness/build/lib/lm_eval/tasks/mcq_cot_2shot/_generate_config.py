import yaml
from tqdm import tqdm
import os
import json
from collections import defaultdict

def generate_configs() -> None:
    tasks = ["acp_areach_mcq", "acp_app_mcq", "acp_just_mcq", "acp_land_mcq", "acp_prog_mcq", "acp_reach_mcq", "acp_val_mcq"]
    setting = "2shot"
    for task in tqdm(tasks):
        file_name = f"mcq_cot_{task}_{setting}.yaml"
        try:
            with open(f"{file_name}", "w") as f:
                f.write("# Generated by _generate_configs.py\n")
                yaml.dump(
                    {
                        "include": f"_mcq_cot_{setting}_yaml",
                        "task": f"mcq_cot_{task}_{setting}",
                        "dataset_name": f"mcq_cot_{task}",
                    },
                    f,
                )
        except FileExistsError:
            pass

def run_task(task_name, config):
    results = run_single_task(task_name, config)
    return results

def run_all_tasks(config):
    task_names = ["task1", "task2", "task3", "task4", "task5", "task6", "task7"]
    all_results = defaultdict(list)

    for task_name in task_names:
        print(f"Running {task_name}...")
        results = run_task(task_name, config)
        for key, value in results.items():
            all_results[key].append(value)

    return all_results

def generate_report(all_results, output_path):
    report = {}
    for key, values in all_results.items():
        report[key] = {
            "total": len(values),
            "correct": sum(values),
            "accuracy": sum(values) / len(values) if values else 0
        }
        total_correct += sum(values)
        total += len(values)
    report["total"] = {
        "total": total,
        "correct": total_correct,
        "accuracy": total_correct / total
    }

    with open(output_path, "w") as f:
        json.dump(report, f, indent=4)

    print(f"Report saved to {output_path}")

def main():
    generate_configs()
    config = {
    }
    all_results = run_all_tasks(config)
    generate_report(all_results, "report.json")

if __name__ == "__main__":
    main()